<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>com.iteaj</groupId>
        <artifactId>iboot</artifactId>
        <version>${reversion}</version>
    </parent>

    <name>iboot:bootstrap</name>
    <modelVersion>4.0.0</modelVersion>
    <artifactId>bootstrap</artifactId>

    <dependencies>
        <!-- iot 物联网框架jar依赖 start -->
        <dependency>
            <groupId>com.iteaj</groupId>
            <artifactId>iot-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>com.iteaj</groupId>
            <artifactId>iot-server</artifactId>
        </dependency>
        <dependency>
            <groupId>com.iteaj</groupId>
            <artifactId>iot-modbus</artifactId>
        </dependency>
        <dependency>
            <groupId>com.iteaj</groupId>
            <artifactId>iot-mqtt</artifactId>
        </dependency>
        <dependency>
            <groupId>com.iteaj</groupId>
            <artifactId>iot-serial</artifactId>
        </dependency>
        <!-- iot end -->

        <dependency>
            <groupId>cn.hutool</groupId>
            <version>${hutool.version}</version>
            <artifactId>hutool-http</artifactId>
        </dependency>

        <dependency>
            <groupId>cn.hutool</groupId>
            <version>${hutool.version}</version>
            <artifactId>hutool-cron</artifactId>
        </dependency>

        <dependency>
            <groupId>org.hibernate.validator</groupId>
            <artifactId>hibernate-validator</artifactId>
        </dependency>
        <dependency>
            <version>4.3.0</version>
            <groupId>cn.afterturn</groupId>
            <artifactId>easypoi-spring-boot-starter</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>javax.validation</groupId>
                    <artifactId>validation-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
        </dependency>
        <!--mqtt协议提供-->
        <dependency>
            <groupId>com.iteaj</groupId>
            <artifactId>protocol-mqtt</artifactId>
            <version>${project.version}</version>
        </dependency>
        <!--dtu网关+modbus协议提供-->
        <dependency>
            <groupId>com.iteaj</groupId>
            <artifactId>protocol-dtu</artifactId>
            <version>${project.version}</version>
        </dependency>
        <!--modbus协议提供-->
        <dependency>
            <groupId>com.iteaj</groupId>
            <artifactId>modbus-rtu</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.iteaj</groupId>
            <artifactId>modbus-tcp</artifactId>
            <version>${project.version}</version>
        </dependency>

        <dependency>
            <scope>provided</scope>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>

        <!-- 非开发环境可注释掉 start -->
        <dependency>
            <groupId>p6spy</groupId>
            <artifactId>p6spy</artifactId>
            <version>${p6spy.version}</version>
        </dependency>
        <!-- 非开发环境可注释掉 end -->

        <!-- 缓存配置 -->
<!--        <dependency>-->
<!--            <artifactId>caffeine</artifactId>-->
<!--            <groupId>com.github.ben-manes.caffeine</groupId>-->
<!--        </dependency>-->

        <!-- iboot 可选插件 -->
        <!--低代码平台插件-->
        <dependency>
            <groupId>com.iteaj</groupId>
            <artifactId>iboot-code</artifactId>
            <version>${project.version}</version>
        </dependency>

        <!-- Shiro权限认证插件(和SaToken二选其一)-->
<!--        <dependency>-->
<!--            <groupId>com.iteaj</groupId>-->
<!--            <artifactId>iboot-shiro</artifactId>-->
<!--            <version>${project.version}</version>-->
<!--        </dependency>-->

        <!-- SaToken权限认证插件(和Shiro二选其一)-->
        <dependency>
            <groupId>com.iteaj</groupId>
            <version>${project.version}</version>
            <artifactId>iboot-SaToken</artifactId>
        </dependency>

        <!-- Oauth2服务插件(使用SaToken开发)-->
        <dependency>
            <groupId>com.iteaj</groupId>
            <artifactId>iboot-oauth2</artifactId>
            <version>${project.version}</version>
        </dependency>

        <!-- Quartz定时任务插件 -->
<!--        <dependency>-->
<!--            <groupId>com.iteaj</groupId>-->
<!--            <artifactId>iboot-quartz</artifactId>-->
<!--            <version>${project.version}</version>-->
<!--        </dependency>-->

        <!-- knife4j Api文档插件-->
        <dependency>
            <groupId>com.iteaj</groupId>
            <version>${project.version}</version>
            <artifactId>iboot-knife4j</artifactId>
        </dependency>

        <!-- 消息源插件(短信, email, 钉钉...) -->
<!--        <dependency>-->
<!--            <groupId>com.iteaj</groupId>-->
<!--            <version>${project.version}</version>-->
<!--            <artifactId>iboot-message</artifactId>-->
<!--        </dependency>-->
        <dependency>
            <optional>true</optional>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <version>${springboot.version}</version>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <mainClass>com.iteaj.iboot.boot.IBootApplication</mainClass>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <version>3.0.4</version>
                <groupId>com.ly.smart-doc</groupId>
                <artifactId>smart-doc-maven-plugin</artifactId>
                <configuration>
                    <!--指生成文档的使用的配置文件,配置文件放在自己的项目中-->
                    <configFile>./src/main/resources/smart-doc.json</configFile>
                    <!--指定项目名称-->
                    <projectName>iboot后台管理</projectName>
                    <!--smart-doc实现自动分析依赖树加载第三方依赖的源码，如果一些框架依赖库加载不到导致报错，这时请使用excludes排除掉-->
                    <excludes>
                        <!--格式为：groupId:artifactId;参考如下-->
                        <exclude>com.alibaba:fastjson</exclude>
                    </excludes>
                    <!--自1.0.8版本开始，插件提供includes支持,配置了includes后插件会按照用户配置加载而不是自动加载，因此使用时需要注意-->
                    <!--smart-doc能自动分析依赖树加载所有依赖源码，原则上会影响文档构建效率，因此你可以使用includes来让插件加载你配置的组件-->
                    <includes>
                        <!--格式为：groupId:artifactId;参考如下-->
                        <include>com.alibaba:fastjson</include>
                    </includes>
                </configuration>
                <executions>
                    <execution>
                        <!--如果不需要在执行编译时启动smart-doc，则将phase注释掉-->
<!--                        <phase>compile</phase>-->
                        <goals>
                            <!--smart-doc提供了html、openapi、markdown等goal，可按需配置-->
                            <goal>html</goal>
                            <goal>openapi</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
